{"version":3,"sources":["src/tetris.js"],"names":[],"mappings":"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","file":"tetris.js","sourcesContent":["import Tetromino from 'javascripts/tetromino';\nimport TetrisMap from 'javascripts/tetrismap';\nimport Controller from 'javascripts/controller';\nimport Sound from 'javascripts/sound';\n\nexport default class Tetris {\n\n    constructor(options) {\n        this.options = options;\n\n        this._initInterface();\n        this._initGame();\n        this._startGame();\n    }\n\n    _initInterface() {\n        const gameArea = document.getElementById(this.options.gameArea);\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.innerText = 'Your browser doesn\\'t support html5 canvas, please upgrade your browser.';\n        gameArea.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d');\n\n        this.gameConfig = {};\n        this.gameConfig.rows = 20;\n        this.gameConfig.columns = 10;\n        let tetrominoSize = 0;\n        if (document.body.clientWidth <= 767) {\n            // phone\n            tetrominoSize = Math.floor(document.body.clientWidth * 0.85 / this.gameConfig.columns);\n        } else if (document.body.clientWidth <= 959) {\n            // pad\n            tetrominoSize = 50;\n        } else {\n            // desktop\n            tetrominoSize = 60;\n        }\n\n        this.gameConfig.tetrominoSize = tetrominoSize;\n        this.gameConfig.mapWidth = tetrominoSize * this.gameConfig.columns;\n        this.gameConfig.mapHeight = tetrominoSize * this.gameConfig.rows;\n        this.gameConfig.gap = tetrominoSize * 2;\n        this.gameConfig.infoWidth = tetrominoSize * 6;\n\n        this.canvas.width = this.gameConfig.mapWidth + this.gameConfig.gap + this.gameConfig.infoWidth + this.gameConfig.gap;\n        this.canvas.height = this.gameConfig.mapHeight;\n        this.canvas.style.width = this.canvas.width / 2 + 'px';\n        this.canvas.style.height = this.canvas.height / 2 + 'px';\n    }\n\n    _initGame() {\n        const tetrominoSize = this.gameConfig.tetrominoSize;\n        const ctx = this.ctx;\n        // clear canvas\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        this.map = new TetrisMap(this.gameConfig, ctx);\n\n        this.map.drawBackground();\n        this.map.draw();\n\n        this._drawLeftText('black', 'NEXT', tetrominoSize, 0, tetrominoSize * 2);\n        this._drawLeftText('black', 'SPEED', tetrominoSize, 0, tetrominoSize * 11);\n        this._drawLeftText('black', 'SCORE', tetrominoSize, 0, tetrominoSize * 15);\n\n        // get a random tetromino\n        this.tetromino = new Tetromino(this.gameConfig, this.ctx);\n        this.nextTetromino = new Tetromino(this.gameConfig, this.ctx);\n\n        // draw next tetromino\n        this._drawNextTetromino();\n        // draw speed\n        this.count = 1;\n        this.speed = 50;\n        this._drawLeftText('black', this.speed, tetrominoSize, 1, tetrominoSize * 13);\n        // draw score\n        this.score = 0;\n        this._drawLeftText('black', this.score, tetrominoSize, 1, tetrominoSize * 17);\n\n        this.gameover = false;\n    }\n\n    _startGame() {\n        Controller.addListener(this.canvas, (direction)=> {\n            if (this.gameover) {\n                // reset game data\n                this._initGame();\n                // restart auto down\n                setTimeout(autoDown, 1000 - this.speed);\n            } else {\n                switch (direction) {\n                    case 'left':\n                        if (this.map.canTetrominoMove(this.tetromino, -1, 0)) {\n                            this.tetromino.move(-1, 0);\n                            this.map.updateTetrominoFixedPosition(this.tetromino);\n                        }\n                        break;\n                    case 'right':\n                        if (this.map.canTetrominoMove(this.tetromino, 1, 0)) {\n                            this.tetromino.move(1, 0);\n                            this.map.updateTetrominoFixedPosition(this.tetromino);\n                        }\n                        break;\n                    case 'down':\n                        if (this.map.canTetrominoMove(this.tetromino, 0, 1)) {\n                            this.tetromino.move(0, 1);\n                        }\n                        break;\n                    case 'up':\n                        if (this.map.canTetrominoTransform(this.tetromino)) {\n                            this.tetromino.setShape(this.tetromino.getNextShape());\n                            this.map.updateTetrominoFixedPosition(this.tetromino);\n                        }\n                        break;\n                }\n            }\n\n            // draw\n            this.map.drawBackground();\n            this.map.draw();\n            this.map.drawTetrominoFixedPosition(this.tetromino);\n            this.tetromino.draw();\n        });\n\n        // tetromino auto down\n        const autoDown = ()=> {\n            if (!this.map.canTetrominoMove(this.tetromino, 0, 1)) {\n                // reach bottom\n                this.map.setTetrominoToMap(this.tetromino, ()=> {\n                    // calc & update score\n                    this.score += this.map.getScore();\n                    this._drawLeftText('black', this.score, this.gameConfig.tetrominoSize, 1, this.gameConfig.tetrominoSize * 17);\n                    // create a new tetromino\n                    this.tetromino = this.nextTetromino;\n                    this.nextTetromino = new Tetromino(this.gameConfig, this.ctx);\n                    this.count++;\n                    // draw next tetromino\n                    this._drawNextTetromino();\n                    // calc & update speed\n                    if (this.count % 30 === 0 && this.speed < 850) {\n                        this.speed += 50;\n                        this._drawLeftText('black', this.speed, this.gameConfig.tetrominoSize, 1, this.gameConfig.tetrominoSize * 13);\n                    }\n\n                    // next turn\n                    if (this.map.canTetrominoMove(this.tetromino, 0, 1)) {\n                        autoDown();\n                    } else {\n                        this._gameOver();\n                    }\n                });\n            } else {\n                // down one block\n                this.tetromino.move(0, 1);\n                // next turn\n                setTimeout(autoDown, 1000 - this.speed);\n            }\n\n            // draw\n            if (!this.gameover) {\n                this.map.drawBackground();\n                this.map.draw();\n                this.map.drawTetrominoFixedPosition(this.tetromino);\n                this.tetromino.draw();\n            }\n        };\n\n        setTimeout(autoDown, 1000 - this.speed);\n    }\n\n    _drawNextTetromino() {\n        const ctx = this.ctx;\n        const config = this.gameConfig;\n        const size = config.tetrominoSize;\n\n        // clean area\n        ctx.clearRect(config.columns * size + config.gap, size * 4, size * 4, size * 4);\n\n        // draw next tetromino\n        this.nextTetromino.draw(config.columns + config.gap / size + 2, 5 + 1);\n\n        // draw current tetromino fixed position\n        this.map.updateTetrominoFixedPosition(this.tetromino);\n    }\n\n    _gameOver() {\n        this.gameover = true;\n        const ctx = this.ctx;\n        const config = this.gameConfig;\n        const size = config.tetrominoSize;\n\n        const drawMapCenterText = (text, color, strokeColor, fontSize, yPercent)=> {\n            ctx.fillStyle = color;\n            ctx.strokeStyle = strokeColor;\n            ctx.font = `bold ${fontSize}px Arial`;\n            ctx.textBaseline = 'top';\n            const ms = ctx.measureText(text);\n            ctx.fillText(text, (config.mapWidth - ms.width) / 2, config.mapHeight * yPercent);\n            ctx.strokeText(text, (config.mapWidth - ms.width) / 2, config.mapHeight * yPercent);\n        };\n\n        // draw mask\n        ctx.fillStyle = 'rgba(115, 115, 115, .8)';\n        ctx.fillRect(0, 0, config.mapWidth, config.mapHeight);\n\n        // draw `Game Over`\n        drawMapCenterText('Game Over', 'green', 'white', size * 1.4, .35);\n        // draw `press any key to restart`\n        drawMapCenterText('press any key to restart', 'white', 'transparent', size * .6, .5);\n    }\n\n    _drawLeftText(color, text, size, offsetX, y) {\n        const ctx = this.ctx;\n        const config = this.gameConfig;\n\n        ctx.fillStyle = color;\n        ctx.font = `bold ${size}px Arial`;\n        ctx.textBaseline = 'top';\n        // swipe original text\n        ctx.clearRect(config.mapWidth + config.gap + offsetX * config.tetrominoSize, y, config.tetrominoSize * text.toString().length, config.tetrominoSize);\n        // draw new text\n        ctx.fillText(text, config.mapWidth + config.gap + offsetX * config.tetrominoSize, y);\n    };\n\n    set options(_options) {\n        const options = {\n            gameArea: ''\n        };\n\n        for (let key in options) {\n            if (_options[key] !== undefined) {\n                options[key] = _options[key];\n            }\n        }\n\n        this._options = options;\n    }\n\n    get options() {\n        return this._options;\n    }\n}"]}