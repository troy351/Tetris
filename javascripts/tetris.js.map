{"version":3,"sources":["src/tetris.js"],"names":[],"mappings":"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","file":"tetris.js","sourcesContent":["import Tetromino from 'javascripts/tetromino';\nimport TetrisMap from 'javascripts/tetrismap';\nimport Controller from 'javascripts/controller';\nimport Sound from 'javascripts/sound';\n\nexport default class Tetris {\n    constructor(options) {\n        this.options = options;\n\n        this._initInterface();\n        this._initGame();\n        this._startGame();\n    }\n\n    _initInterface() {\n        const gameArea = document.getElementById(this.options.gameArea);\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.innerText = 'Your browser doesn\\'t support html5 canvas, please upgrade your browser.';\n        gameArea.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d');\n\n        this.gameConfig = {};\n        this.gameConfig.rows = 20;\n        this.gameConfig.columns = 10;\n        let tetrominoSize = 0;\n        if (document.body.clientWidth <= 767) {\n            // phone\n            tetrominoSize = Math.floor(document.body.clientWidth * 0.85 / this.gameConfig.columns);\n        } else if (document.body.clientWidth <= 959) {\n            // pad\n            tetrominoSize = 50;\n        } else {\n            // desktop\n            tetrominoSize = 60;\n        }\n\n        this.gameConfig.tetrominoSize = tetrominoSize;\n        this.gameConfig.mapWidth = tetrominoSize * this.gameConfig.columns;\n        this.gameConfig.mapHeight = tetrominoSize * this.gameConfig.rows;\n        this.gameConfig.gap = tetrominoSize * 2;\n        this.gameConfig.infoWidth = tetrominoSize * 6;\n\n        this.canvas.width = this.gameConfig.mapWidth + this.gameConfig.gap + this.gameConfig.infoWidth + this.gameConfig.gap;\n        this.canvas.height = this.gameConfig.mapHeight;\n        this.canvas.style.width = this.canvas.width / 2 + 'px';\n        this.canvas.style.height = this.canvas.height / 2 + 'px';\n    }\n\n    _initGame() {\n        const tetrominoSize = this.gameConfig.tetrominoSize;\n        const ctx = this.ctx;\n\n        this.map = new TetrisMap(this.gameConfig, ctx);\n\n        this.map.drawBackground();\n        this.map.draw();\n\n        const drawLeftText = (color, text, size, y)=> {\n            ctx.fillStyle = color;\n            ctx.font = `bold ${size}px Arial`;\n            ctx.textBaseline = 'top';\n            // const mt = ctx.measureText(text);\n            ctx.fillText(text, this.gameConfig.mapWidth + this.gameConfig.gap, y);\n        };\n\n        drawLeftText('black', 'NEXT', tetrominoSize, tetrominoSize * 2);\n        drawLeftText('black', 'SPEED', tetrominoSize, tetrominoSize * 11);\n        drawLeftText('black', 'SCORE', tetrominoSize, tetrominoSize * 15);\n\n        // get a random tetromino\n        this.tetromino = new Tetromino(this.gameConfig, this.ctx);\n    }\n\n    _startGame() {\n        Controller.addListener(this.canvas, (direction)=> {\n            switch (direction) {\n                case 'left':\n                    if (this.map.canTetrominoMove(this.tetromino, -1, 0)) {\n                        this.tetromino.move(-1, 0);\n                    }\n                    break;\n                case 'right':\n                    if (this.map.canTetrominoMove(this.tetromino, 1, 0)) {\n                        this.tetromino.move(1, 0);\n                    }\n                    break;\n                case 'down':\n                    if (this.map.canTetrominoMove(this.tetromino, 0, 3)) {\n                        this.tetromino.move(0, 3);\n                    } else {\n\n                    }\n                    break;\n                case 'up':\n                    if (this.map.canTetrominoTransform(this.tetromino)) {\n                        this.tetromino.setShape(this.tetromino.getNextShape());\n                    }\n                    break;\n            }\n\n            // draw\n            this.map.drawBackground();\n            this.map.draw();\n            this.tetromino.draw();\n        });\n\n        // tetromino auto down\n        setInterval(()=> {\n            // reach bottom\n            if(this.map.reachBottom(this.tetromino)){\n                this.map.setTetrominoToMap(this.tetromino);\n                this.tetromino = new Tetromino(this.gameConfig, this.ctx);\n            } else\n            // down one block\n            if (this.map.canTetrominoMove(this.tetromino, 0, 1)) {\n                this.tetromino.move(0, 1);\n            }\n\n            // draw\n            this.map.drawBackground();\n            this.map.draw();\n            this.tetromino.draw();\n        }, 1000);\n    }\n\n    set options(_options) {\n        const options = {\n            gameArea: ''\n        };\n\n        for (let key in options) {\n            if (_options[key] !== undefined) {\n                options[key] = _options[key];\n            }\n        }\n\n        this._options = options;\n    }\n\n    get options() {\n        return this._options;\n    }\n}"]}