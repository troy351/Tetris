{"version":3,"sources":["src/tetris.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAKqB,M;AACjB,wBAAY,OAAZ,EAAqB;AAAA;;AACjB,iBAAK,OAAL,GAAe,OAAf;;AAEA,iBAAK,cAAL;AACA,iBAAK,SAAL;AACH;;;;6CAEgB;AACb,oBAAM,WAAW,SAAS,cAAT,CAAwB,KAAK,OAAL,CAAa,QAArC,CAAjB;;AAEA,qBAAK,MAAL,GAAc,SAAS,aAAT,CAAuB,QAAvB,CAAd;AACA,yBAAS,WAAT,CAAqB,KAAK,MAA1B;AACA,qBAAK,GAAL,GAAW,KAAK,MAAL,CAAY,UAAZ,CAAuB,IAAvB,CAAX;;AAEA,oBAAI,gBAAgB,CAApB;AACA,oBAAI,SAAS,IAAT,CAAc,WAAd,IAA6B,GAAjC,EAAsC;AAClC;AACA,oCAAgB,KAAK,KAAL,CAAW,SAAS,IAAT,CAAc,WAAd,GAA4B,IAA5B,GAAmC,EAA9C,CAAhB;AACH,iBAHD,MAGO;AACH;AACA,oCAAgB,EAAhB;AACH;;AAED,oBAAM,WAAW,gBAAgB,EAAjC;AACA,oBAAM,YAAY,gBAAgB,EAAlC;AACA,oBAAM,MAAM,gBAAgB,CAA5B;AACA,oBAAM,YAAY,gBAAgB,CAAlC;;AAEA,qBAAK,MAAL,CAAY,KAAZ,GAAoB,WAAW,GAAX,GAAiB,SAAjB,GAA6B,GAAjD;AACA,qBAAK,MAAL,CAAY,MAAZ,GAAqB,SAArB;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,KAAlB,GAA0B,KAAK,MAAL,CAAY,KAAZ,GAAoB,CAApB,GAAwB,IAAlD;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,GAA2B,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAArB,GAAyB,IAApD;AACH;;;wCAEW;AACR,qBAAK,GAAL,GAAW,wBAAc,KAAK,MAAL,CAAY,MAAZ,GAAqB,EAAnC,EAAuC,KAAK,GAA5C,CAAX;;AAEA,qBAAK,GAAL,CAAS,eAAT;AACH;;;8BAEW,Q,EAAU;AAClB,oBAAM,UAAU;AACZ,8BAAU;AADE,iBAAhB;;AAIA,qBAAK,IAAI,GAAT,IAAgB,OAAhB,EAAyB;AACrB,wBAAI,SAAS,GAAT,MAAkB,SAAtB,EAAiC;AAC7B,gCAAQ,GAAR,IAAe,SAAS,GAAT,CAAf;AACH;AACJ;;AAED,qBAAK,QAAL,GAAgB,OAAhB;AACH,a;gCAEa;AACV,uBAAO,KAAK,QAAZ;AACH;;;;;;sBAzDgB,M","file":"tetris.js","sourcesContent":["import Tetromino from 'javascripts/tetromino';\nimport TetrisMap from 'javascripts/tetrismap';\nimport Controller from 'javascripts/controller';\nimport Sound from 'javascripts/sound';\n\nexport default class Tetris {\n    constructor(options) {\n        this.options = options;\n\n        this._initInterface();\n        this._initGame();\n    }\n\n    _initInterface() {\n        const gameArea = document.getElementById(this.options.gameArea);\n\n        this.canvas = document.createElement('canvas');\n        gameArea.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d');\n\n        let tetrominoSize = 0;\n        if (document.body.clientWidth <= 700) {\n            // mobile device\n            tetrominoSize = Math.floor(document.body.clientWidth * 0.85 / 10);\n        } else {\n            // desktop device\n            tetrominoSize = 60;\n        }\n\n        const mapWidth = tetrominoSize * 10;\n        const mapHeight = tetrominoSize * 20;\n        const gap = tetrominoSize * 2;\n        const infoWidth = tetrominoSize * 6;\n\n        this.canvas.width = mapWidth + gap + infoWidth + gap;\n        this.canvas.height = mapHeight;\n        this.canvas.style.width = this.canvas.width / 2 + 'px';\n        this.canvas.style.height = this.canvas.height / 2 + 'px';\n    }\n\n    _initGame() {\n        this.map = new TetrisMap(this.canvas.height / 20, this.ctx);\n\n        this.map._drawBackground();\n    }\n\n    set options(_options) {\n        const options = {\n            gameArea: ''\n        };\n\n        for (let key in options) {\n            if (_options[key] !== undefined) {\n                options[key] = _options[key];\n            }\n        }\n\n        this._options = options;\n    }\n\n    get options() {\n        return this._options;\n    }\n}"]}