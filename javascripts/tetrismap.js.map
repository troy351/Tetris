{"version":3,"sources":["src/tetrismap.js"],"names":[],"mappings":"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","file":"tetrismap.js","sourcesContent":["import Tetromino from 'javascripts/tetromino';\n\nexport default class TetrisMap {\n\n    constructor(config, ctx) {\n        this.config = config;\n        this.ctx = ctx;\n\n        // init map\n        this.map = [];\n        for (let i = 0; i < this.config.rows; i++) {\n            const row = [];\n            for (let j = 0; j < this.config.columns; j++) {\n                row.push('');\n            }\n            this.map.push(row);\n        }\n    }\n\n    drawBackground() {\n        const ctx = this.ctx;\n        const size = this.config.tetrominoSize;\n        const rows = this.config.rows;\n        const columns = this.config.columns;\n\n        // draw a gradient background color\n        ctx.fillStyle = '#1a1a1a';\n        ctx.fillRect(0, 0, size * columns, size * rows);\n\n        // draw a white grid\n        ctx.strokeStyle = 'white';\n        for (let i = 0; i < columns; i++) {\n            for (let j = 0; j < rows; j++) {\n                ctx.strokeRect(size * i, size * j, size, size);\n            }\n        }\n    }\n\n    draw(fullRows) {\n        fullRows = fullRows || [];\n\n        const size = this.config.tetrominoSize;\n        const rows = this.config.rows;\n        const columns = this.config.columns;\n\n        for (let i = rows - 1; i >= 0; i--) {\n            // skip drawing rows that in hide animation\n            if (fullRows[i] === true) {\n                continue;\n            }\n\n            let isRowEmpty = true;\n            for (let j = 0; j < columns; j++) {\n                if (this.map[i][j] !== '') {\n                    isRowEmpty = false;\n                    Tetromino.prototype.drawBlock.call(this, this.map[i][j], size * j, size * i);\n                }\n            }\n\n            // empty row, there won't be any blocks above\n            if (isRowEmpty) {\n                break;\n            }\n        }\n    }\n\n    canTetrominoTransform(tetromino) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        const nextShape = tetromino.getNextShape();\n        this.tetrominoPositions = tetromino.getShapePosition(nextShape);\n\n        return this._isTetrominoPositionLegal();\n    }\n\n    canTetrominoMove(tetromino, offsetX, offsetY) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        offsetX = offsetX || 0;\n        offsetY = offsetY || 0;\n\n        this.tetrominoPositions = tetromino.getShapePosition(null, offsetX, offsetY);\n\n        return this._isTetrominoPositionLegal();\n    }\n\n    setTetrominoToMap(tetromino, callback) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        const positions = tetromino.getShapePosition();\n        const color = tetromino.getColor();\n\n        for (let i = 0; i < positions.length; i++) {\n            const x = positions[i][0];\n            const y = positions[i][1];\n            this.map[y][x] = color;\n        }\n\n        // get full rows\n        const fullRows = [];\n        let hasFullRows = false;\n        for (let i = 0; i < positions.length; i++) {\n            // get row number of the one block in current tetromino\n            const row = positions[i][1];\n            // current row already calculated, skip\n            if (fullRows[row] !== undefined) {\n                continue;\n            }\n\n            let isFull = true;\n            for (let j = 0; j < this.config.columns; j++) {\n                if (this.map[row][j] === '') {\n                    isFull = false;\n                }\n            }\n\n            hasFullRows = isFull ? true : hasFullRows;\n            fullRows[row] = isFull;\n        }\n\n        // has full rows\n        if (hasFullRows) {\n            this._shiningBlocks(fullRows, 3, 200, callback);\n        } else {\n            this.score = 0;\n            callback();\n        }\n    }\n\n    updateTetrominoFixedPosition(tetromino) {\n        let y = 0;\n        while (this.canTetrominoMove(tetromino, 0, y + 1)) {\n            y++;\n        }\n\n        this.outlinePositions = tetromino.getShapePosition(null, 0, y);\n    }\n\n    drawTetrominoFixedPosition(tetromino) {\n        tetromino.drawOutline(this.outlinePositions);\n    }\n\n    getScore() {\n        return this.score;\n    }\n\n    _shiningBlocks(fullRows, times, duration, callback) {\n        times = times || 3;\n        let curTimes = 0;\n        // for each show and hide, double times and half duration\n        times *= 2;\n        duration /= 2;\n\n        const shining = setInterval(()=> {\n            curTimes++;\n\n            this.drawBackground();\n\n            if (curTimes % 2 === 0) {\n                // hide full rows\n                this.draw(fullRows);\n            } else {\n                // show full rows\n                this.draw();\n            }\n\n            // animation complete\n            if (curTimes >= times) {\n                clearInterval(shining);\n                this._deleteFullRows(fullRows);\n                callback();\n            }\n        }, duration);\n    }\n\n    _deleteFullRows(fullRows) {\n        // delete `false` key in fullRows and sort it.\n        const fr = [];\n        for (let key in fullRows) {\n            if (fullRows[key] === true) {\n                fr.push(parseInt(key));\n            }\n        }\n        fr.sort((a, b)=> {\n            return b - a;\n        });\n\n        // calc score\n        this.score = 100 * (fr.length * 2 - 1);\n\n        // the row number will be affected by the under row wiping.\n        for (let i = 0; i < fr.length; i++) {\n            fr[i] += i;\n        }\n\n        // replace full rows with above rows, and empty above rows.\n        for (let k = 0; k < fr.length; k++) {\n            for (let i = fr[k] - 1; i >= 0; i--) {\n                for (let j = 0; j < this.config.columns; j++) {\n                    this.map[i + 1][j] = this.map[i][j];\n                    this.map[i][j] = '';\n                }\n            }\n        }\n    }\n\n    _isTetrominoPositionLegal() {\n        const positions = this.tetrominoPositions;\n\n        for (let i = 0; i < positions.length; i++) {\n            const x = positions[i][0];\n            const y = positions[i][1];\n            if (x < this.config.columns && x >= 0 && y < this.config.rows && y >= 0) {\n                if (this.map[y][x] !== '') {\n                    // already had a block here\n                    return false;\n                }\n            } else {\n                // out of map area\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"]}