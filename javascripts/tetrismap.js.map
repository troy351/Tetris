{"version":3,"sources":["src/tetrismap.js"],"names":[],"mappings":"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","file":"tetrismap.js","sourcesContent":["import Tetromino from 'javascripts/tetromino';\n\nexport default class TetrisMap {\n    constructor(config, ctx) {\n        this.config = config;\n        this.ctx = ctx;\n\n        // init map\n        this.map = [];\n        for (let i = 0; i < this.config.rows; i++) {\n            const row = [];\n            for (let j = 0; j < this.config.columns; j++) {\n                row.push('');\n            }\n            this.map.push(row);\n        }\n    }\n\n    drawBackground() {\n        const ctx = this.ctx;\n        const size = this.config.tetrominoSize;\n        const rows = this.config.rows;\n        const columns = this.config.columns;\n\n        // draw a gradient background color\n        const lineGradient = ctx.createLinearGradient(0, 0, size * columns, size * rows);\n        lineGradient.addColorStop(0, '#082877');\n        lineGradient.addColorStop(1, '#040a1b');\n        ctx.fillStyle = lineGradient;\n        ctx.fillRect(0, 0, size * columns, size * rows);\n\n        // draw a white grid\n        ctx.strokeStyle = 'white';\n        for (let i = 0; i < columns; i++) {\n            for (let j = 0; j < rows; j++) {\n                ctx.strokeRect(size * i, size * j, size, size);\n            }\n        }\n    }\n\n    draw() {\n        const size = this.config.tetrominoSize;\n        const rows = this.config.rows;\n        const columns = this.config.columns;\n\n        for (let i = rows - 1; i >= 0; i--) {\n            let isRowEmpty = true;\n            for (let j = 0; j < columns; j++) {\n                if (this.map[i][j] !== '') {\n                    isRowEmpty = false;\n                    Tetromino.prototype.drawBlock.call(this, this.map[i][j], size * j, size * i);\n                }\n            }\n\n            // empty row, there won't be any blocks above\n            if (isRowEmpty) {\n                break;\n            }\n        }\n    }\n\n    canTetrominoTransform(tetromino) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        const nextShape = tetromino.getNextShape();\n        this.tetrominoPositions = tetromino.getShapePosition(nextShape);\n\n        return this._isTetrominoPositionLegal();\n    }\n\n    canTetrominoMove(tetromino, offsetX, offsetY) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        offsetX = offsetX || 0;\n        offsetY = offsetY || 0;\n\n        this.tetrominoPositions = tetromino.getShapePosition(null, offsetX, offsetY);\n\n        return this._isTetrominoPositionLegal();\n    }\n\n    reachBottom(tetromino) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        const positions = tetromino.getShapePosition();\n\n        for (let i = 0; i < positions.length; i++) {\n            const x = positions[i][0];\n            const y = positions[i][1];\n            if (y + 1 === this.config.rows || this.map[y + 1][x] !== '') {\n                // reach bottom || there is a color block below\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setTetrominoToMap(tetromino) {\n        if (tetromino === undefined) {\n            return false;\n        }\n\n        const positions = tetromino.getShapePosition();\n        const color = tetromino.getColor();\n\n        for (let i = 0; i < positions.length; i++) {\n            const x = positions[i][0];\n            const y = positions[i][1];\n            this.map[y][x] = color;\n        }\n    }\n\n    _isTetrominoPositionLegal() {\n        const positions = this.tetrominoPositions;\n\n        for (let i = 0; i < positions.length; i++) {\n            const x = positions[i][0];\n            const y = positions[i][1];\n            if (x < this.config.columns && x >= 0 && y < this.config.rows && y >= 0) {\n                if (this.map[y][x] !== '') {\n                    // already had a block here\n                    return false;\n                }\n            } else {\n                // out of map area\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"]}